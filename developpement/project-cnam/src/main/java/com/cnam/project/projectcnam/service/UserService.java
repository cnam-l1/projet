package com.cnam.project.projectcnam.service;

import com.cnam.project.projectcnam.api.exception.BadRequestException;
import com.cnam.project.projectcnam.api.exception.NotFoundException;
import com.cnam.project.projectcnam.bdd.DAO.UserDAO;
import com.cnam.project.projectcnam.bdd.DTO.UserDTO;
import com.cnam.project.projectcnam.converter.UserConverter;
import com.cnam.project.projectcnam.security.exception.PasswordException;
import com.cnam.project.projectcnam.security.passwordValidator.PasswordValidator;
import io.swagger.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.validation.Valid;
import java.util.UUID;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Developed by Hugo Seban
 * Date : 16/06/2018
 * email : hugoseban@icloud.com
 */

@Service
public class UserService {

    private Logger logger = LoggerFactory.getLogger(UserService.class);

    @Autowired
    private UserDAO userDAO;

    @Autowired
    private UserConverter userConverter;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private PasswordValidator passwordValidator;

    /**
     * Create an user into the database.
     *
     * @param user {@link User} User client side generated by swagger.
     * @return The new user.
     */
    public User userCreate(@Valid User user) {

        checkArgument(!user.getLogin().isEmpty(), "Login is mandatory.");
        checkArgument(!user.getPassword().isEmpty(), "Password is mandatory.");

        logger.debug("[UserService] [userCreate] is called. User.login : {}", user.getLogin());

        try {

            passwordValidator.validatePassword(user.getPassword());

            userDAO.getUserByLogin(user.getLogin());

        } catch (NotFoundException nfe) {

            user.setIdUser(UUID.randomUUID().toString());
            UserDTO newUserDTO = userDAO.saveUser(userConverter.convertUserClientInUserDao(user));

            return userConverter.convertUserDAOInUserClient(newUserDTO);

        } catch (PasswordException pe) {

            throw new BadRequestException(pe.getMessage());

        }

        throw new BadRequestException("Login already exist.");
    }

    /**
     * Update the user into the database.
     *
     * @param userId User's identifier.
     * @param user   {@link User} User client side generated by swagger.
     * @return {@link User} The user updated.
     */
    public User userUpdate(String userId, @Valid User user) {

        checkArgument(!userId.isEmpty(), "User identifier is mandatory.");

        logger.debug("[UserService] [userUpdate] is called. user.id : {}", user.getIdUser());

        UserDTO userDTO = userDAO.getUserById(userId);

        if (!userId.equals(userDTO.getIdHashUser())) {

            throw new NotFoundException("User identifier is not found");
        }

        if (!user.getPassword().isEmpty() && !isSamePassword(user, userDTO)) {

            passwordValidator.validatePassword(user.getPassword());

            userDTO.setPassword(passwordEncoder.encode(user.getPassword()));
        }

        if (!user.getLogin().isEmpty()) {

            userDTO.setLogin(user.getLogin());
        }

        userDTO = userDAO.saveUser(userDTO);

        User userUpdated = userConverter.convertUserDAOInUserClient(userDTO);

        logger.debug("[UserService] [userUpdate] user is updated. user.id : {}", user.getIdUser());

        return userUpdated;
    }

    /**
     * Check if password passed in the request matches with password in database.
     *
     * @param user    {@link User} User client side.
     * @param userDTO {@link UserDTO} User database side.
     * @return True if the password is the same as the database.
     */
    private boolean isSamePassword(@Valid User user, UserDTO userDTO) {

        logger.debug("[UserService] [isSamePassword] is called. userDTO.id : {}", userDTO.getIdHashUser());

        return passwordEncoder.matches(user.getPassword(), userDTO.getPassword());
    }

}
