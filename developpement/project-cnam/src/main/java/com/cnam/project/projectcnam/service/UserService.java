package com.cnam.project.projectcnam.service;

import com.cnam.project.projectcnam.dao.model.UserDao;
import com.cnam.project.projectcnam.dao.repository.UserRepository;
import com.cnam.project.projectcnam.exception.model.BadRequestException;
import com.cnam.project.projectcnam.exception.model.DAOException;
import com.cnam.project.projectcnam.exception.model.NotFoundException;
import com.cnam.project.projectcnam.service.model.Credentials;
import io.swagger.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.validation.Valid;
import java.util.UUID;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Developed by Hugo Seban
 * Date : 16/06/2018
 * email : hugoseban@icloud.com
 */

@Service
public class UserService {

    private Logger logger = LoggerFactory.getLogger(UserService.class);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * Create an user into the database.
     *
     * @param user {@link User} User client side generated by swagger.
     * @return The new user.
     */
    public User userCreate(@Valid User user) {

        checkArgument(user != null, "User is mandatory.");
        checkArgument(user.getLogin() != null, "Login is mandatory.");
        checkArgument(user.getPassword() != null, "Password is mandatory.");

        logger.debug("[UserService] [userCreate] is called. User.login : {}", user.getLogin());

        UserDao userDao = new UserDao();
        userDao.setLogin(user.getLogin());
        userDao.setPassword(passwordEncoder.encode(user.getPassword()));
        userDao.setIdHashUser(UUID.randomUUID().toString());

        User newUser = new User();

        try {

            UserDao userDaoResponse = userRepository.save(userDao);

            newUser.setIdUser(userDao.getIdHashUser());
            newUser.setLogin(userDao.getLogin());
            newUser.setPassword(userDao.getPassword());

        } catch (Exception e) {

            throw new DAOException("The login already exist.");

        }

        logger.debug("[UserService] [userCreate] User is created. User.login : {}", newUser.getLogin());

        return newUser;
    }

    /**
     * Update the user into the database.
     *
     * @param userId      User's identifier.
     * @param user        {@link User} User cleint side generated by swagger.
     * @return {@link User} The user updated.
     */
    public User userUpdate(String userId, @Valid User user) {

        checkArgument(user != null, "User must not be null.");
        checkArgument(!userId.isEmpty(), "User identifier must not be null.");
        checkArgument(!user.getLogin().isEmpty(), "Login is mandatory.");
        checkArgument(!user.getPassword().isEmpty(), "Password is mandatory.");

        logger.debug("[UserService] [userUpdate] is called. user.id : {}", user.getIdUser());

        UserDao userDao = this.getUserById(userId);

        if (passwordEncoder.matches(user.getPassword(), userDao.getPassword())) {

            userDao.setPassword(userDao.getPassword());
        } else {

            userDao.setPassword(passwordEncoder.encode(user.getPassword()));
        }

        userDao.setLogin(user.getLogin());

        try {

            userDao = userRepository.save(userDao);

        } catch (Exception e) {

            throw new DAOException("Impossible to upadte user.");
        }

        User userUpdated = new User();
        userUpdated.setIdUser(userDao.getIdHashUser());
        userUpdated.setLogin(userDao.getLogin());
        userUpdated.setPassword(userDao.getPassword());

        logger.debug("[UserService] [userUpdate] user is updated. user.id : {}", user.getIdUser());

        return userUpdated;
    }

    /**
     * Get an user database side by his login.
     *
     * @param login User's login.
     * @return {@link UserDao} User database side.
     */
    public UserDao getUserByLogin(String login) {

        checkArgument(!login.isEmpty(), "Login is mandatory.");

        logger.debug("[UserService] [getUserByLogin] is called. login : {}", login);

        UserDao userDao = userRepository.findByLogin(login);

        if (userDao == null) {

            throw new NotFoundException("The User doesn't exist.");
        }

        logger.debug("[UserService] [getUserByLogin] User is find. userDao.getLogin : {}", userDao.getLogin());

        return userDao;
    }

    /**
     * Get an user database side by his identifier.
     *
     * @param idUser User's identifier.
     * @return {@link UserDao} User database side.
     */
    public UserDao getUserById(String idUser) {

        checkArgument(!idUser.isEmpty(), "User identifier is mandatory.");

        logger.debug("[UserService] [getUserById] is called. idUser : {}", idUser);

        UserDao userDao = userRepository.findByIdHashUser(idUser);

        if (userDao == null) {

            throw new NotFoundException("User not found.");
        }

        logger.debug("[UserService] [getUserById] is find. userDao.login : {}", userDao.getLogin());

        return userDao;
    }
}
